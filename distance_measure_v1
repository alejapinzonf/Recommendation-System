import cv2
from ultralytics import YOLO
import numpy as np

def calculate_distance(box1, box2):
    center1 = ((box1[0] + box1[2]) / 2, (box1[1] + box1[3]) / 2)
    center2 = ((box2[0] + box2[2]) / 2, (box2[1] + box2[3]) / 2)
    distance = np.sqrt((center1[0] - center2[0])**2 + (center1[1] - center2[1])**2)
    return distance, center1, center2

model = YOLO('path')
path = ''
cap = cv2.VideoCapture(path)

if not cap.isOpened():
    print("Error con el video")
    exit()

width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
output_videoseg = 'result7.mp4'
out = cv2.VideoWriter(output_videoseg, cv2.VideoWriter_fourcc(*'mp4v'), 30, (width, height))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    results = model(frame)
    annotated_frame = results[0].plot()
    boxes = results[0].boxes.xyxy.cpu().numpy()  # (x1, y1, x2, y2)
    classes = results[0].boxes.cls.cpu().numpy()  
    cicloruta_boxes = [box for box, cls in zip(boxes, classes) if cls == 3]
    for box, cls in zip(boxes, classes):
        if cls != 3:  
            for cicloruta_box in cicloruta_boxes:
                distance, center1, center2 = calculate_distance(box, cicloruta_box)
                cv2.line(annotated_frame, (int(center1[0]), int(center1[1])), (int(center2[0]), int(center2[1])), (255, 0, 0), 2)
                cv2.putText(annotated_frame, f'{distance:.2f}', (int(center1[0]), int(center1[1]) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
    cv2.imshow('result', annotated_frame)
    out.write(annotated_frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
out.release()
cv2.destroyAllWindows()
