import cv2
from ultralytics import YOLO, solutions
import numpy as np
from ultralytics.utils.plotting import Annotator, colors

model = YOLO('/home/aleja/tesis/23092024/runs/segment/train4/weights/best.pt')
path = '/home/aleja/tesis/videos/video5.mp4'
class_colors = {'bolardo':(255,165,0) ,'charco': (0, 255, 255),'ciclista': (0,255,0),  
                'cicloruta': (100, 0, 0), 'hueco': (0,255,128),
                'cruce': (128, 128, 128), 'desnivel': (64, 224, 208), 'motociclista': (0, 0, 255),
                'pare': (255,255,0), 'peaton': (0,0,128),'poste': (255, 192, 203), 'vehiculo': (128, 0, 128)}

def cal_distancia(y_pixeles):
    return 6247.5 * (y_pixeles ** -1.177)

cap = cv2.VideoCapture(path)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
videoseg = '/home/aleja/tesis/23092024/result1.mp4'
out = cv2.VideoWriter(videoseg, cv2.VideoWriter_fourcc(*'mp4v'), 30, (width, height))

while True:
    ret, im0 = cap.read()  
    if not ret:
        break  
    annotator = Annotator(im0, line_width=2)
    results = model.track(im0, persist=True)
    
    if results[0].boxes.id is not None and results[0].masks is not None:
        masks = results[0].masks.xy
        track_ids = results[0].boxes.id.int().cpu().tolist()
        class_ids = results[0].boxes.cls.int().cpu().tolist()  
        class_names = [model.names[class_id] for class_id in class_ids]  
        boxes = results[0].boxes.xyxy.cpu().numpy()  

        for mask, track_id, class_name, box in zip(masks, track_ids, class_names, boxes):
            if mask.size == 0:  
                continue 
            #---------------------------------BOLARDO--------------------------------------------------

            if class_name == 'bolardo':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #----------------------------------CHARCO--------------------------------------------------  

            elif class_name != 'charco':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #--------------------------------CICLISTA-------------------------------------------------- 
               
            elif class_name != 'ciclista':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #----------------------------------HUECO--------------------------------------------------

            elif class_name != 'hueco':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #---------------------------------CRUCE--------------------------------------------------
                
            elif class_name != 'cruce':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #---------------------------------DESNIVEÃ‘--------------------------------------------------

            elif class_name != 'desnivel':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #---------------------------------MOTOCICLISTA--------------------------------------------------
                
            elif class_name != 'motociclista':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #---------------------------------PARE--------------------------------------------------
                
            elif class_name != 'pare':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #---------------------------------PEATON--------------------------------------------------
                
            elif class_name != 'peaton':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #-----------------------------------POSTE------------------------------------------------
                
            elif class_name != 'peaton':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

            #---------------------------------VEHICULO--------------------------------------------------
                
            elif class_name != 'peaton':  
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                y_pos = box[3]  
                distancia = cal_distancia(y_pos) 
                print(f"ID: {track_id}, Y: {y_pos:.2f}, Distancia: {distancia:.2f} metros")
                label = f"{class_name} {track_id} {distancia:.2f} m" 
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)
                
            #----------------------------------CICLORUTA--------------------------------------------------

            elif class_name == 'cicloruta':
                color = class_colors.get(class_name, (255, 255, 255))  
                txt_color = annotator.get_txt_color(color)
                label = f"{class_name} {track_id}"
                annotator.seg_bbox(mask=mask, mask_color=color, label=label, txt_color=txt_color)

    out.write(im0)
    cv2.imshow("video", im0)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
out.release()
cv2.destroyAllWindows()
